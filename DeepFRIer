#!/usr/bin/env python3

import json
import glob
import pandas as pd
import argparse

parser = argparse.ArgumentParser(
                    prog='DeepFRIer',
                    formatter_class=argparse.RawTextHelpFormatter,
                    description='Extracts info from JSON files created by DeepFRI',
                    epilog=
'''Juan Camilo Arboleda Rivera
juan.arboleda2@udea.edu.co
Grupo de Biología Computacional, UdeA, Medellín, Colombia''')

parser.add_argument('-m', '--model',
    required=True,
    help='DeepFRI model. One of: cnn_bp, cnn_cc, cnn_ec, cnn_mf, gcn_bp, gcn_cc, gcn_ec, gcn_mf')
parser.add_argument('-o', '--output', required=True, help='Output file (TSV)')
parser.add_argument('directory',
#    type=pathlib.Path,
    help='Directory containing DeepFRI JSON files')

args = parser.parse_args()

if not args.directory.endswith('/'):
    args.directory += '/'

path = args.directory + '*.json'

def get_predictions(model, path):
    '''Parses .json files generated by DeepFRI and gets the different model
    predictions.

    Parameters
    ----------
    model: DeepFRI models. Can be one of the following: cnn_bp, cnn_cc,
        cnn_ec, cnn_mf, gcn_bp, gcn_cc, gcn_ec, gcn_mf
    '''

    result = []

    for filename in glob.glob(path):
        with open(filename, 'r') as file:
            info = json.load(file)
            
            try:
                cluster, prot_id = info['tags'].split()
            except:
                cluster = None

            for prediction in info['data']['A'][model]['predictions']:
                if cluster:
                    preds = [cluster, prot_id]
                else:
                    preds = []

                for key in prediction:
                    if key.startswith('go_'):
                        preds.append(prediction[key])
                result.append(preds)

    if cluster:
        df = pd.DataFrame(result, columns = ['cluster', 'protein_id',
                                            'GO_term', 'description', 'score'])
    else:
        df = pd.DataFrame(result, columns = ['GO_term', 'description', 'score'])

    return df

if __name__ == '__main__':
    df = get_predictions(args.model, path)
    df.to_csv(args.output, sep='\t', index=False)
    print('File saved to {}'.format(args.output))
